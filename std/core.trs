fn cast(any) any : any do end
fn cast(number) any : number do cast(any) end
fn cast(string) any : string do cast(any) end
fn cast(ptr) any : ptr do cast(any) end

fn prn
    any : do
    pr "\n" pr
end

fn !
    any ptr : do
    memsave
end

fn @
    ptr : any do
    memload
end

fn !num number ptr : do ! end
fn !str string ptr : do ! end
fn !ptr ptr ptr    : do ! end
fn @num ptr : number do @ end
fn @str ptr : string do @ end
fn @ptr ptr : ptr    do @ end

fn ptr-add number ptr : do let count ptr do ptr @num count + ptr !num end end
fn ptr-sub number ptr : do swap 0 1 - * swap ptr-add end
fn ptr-inc ptr : do 1 swap ptr-add end

// src: ptr, dest: ptr, size: number
fn memcopy ptr ptr number : do
    1 memalloc // allocate iterator
    let src dest size i do
        0 i !num
        size repeat
            // dest[i] = src[i]
            "memcpy: " pr i @num pr " " pr src i @num ptr+ @ pr "" prn
            src i @num ptr+ @ dest i @num ptr+ !
            i ptr-inc
        end
        i memfree
    end
end

// src: ptr, oldsize: number, newsize: number -> dest: ptr
fn realloc ptr number number : ptr do
    1 memalloc
    let src oldsize newsize i do newsize memalloc let dest do
        0 i !num
        oldsize repeat
            src i @num ptr+ @ dest i @num ptr+ !
            i ptr-inc
        end
        i memfree
        src memfree
        dest
    end end
end